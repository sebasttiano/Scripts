class Person:
    name = 'Sergei'

print(Person.__dict__)


# Два разных экземпляра класса, для хранения различных свойств
p1 = Person()
p2 = Person()
# Аттрибуты класса являются общеми для каждого экземпляра класса
print(p1.name, '\n', p2.name)

print(id(p1.name), '=', id(p2.name), '=', id(Person.name))

# Интерпретатор сначала ищет в локальном пространстве имен каждого экземпляра, затем поднимается выше
# в пространство имен класса. Что экономит память. На этом механизме основано наследование и полиморфизм в Python
print(p1.__dict__, p2.__dict__, Person.__dict__['name'])

# Дадим свои аттрибуты для каждого класса
p1.name = 'Oleg'
p2.name = 'Dima'
p2.age = 38

print(p1.__dict__, p2.__dict__, Person.__dict__['name'])
